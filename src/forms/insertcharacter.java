/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.jena.ontology.OntModel;
import org.apache.jena.ontology.OntModelSpec;
import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.ResultSetFormatter;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.Resource;
import static org.apache.jena.tdb.sys.FileRef.file;
import org.apache.jena.util.FileManager;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.io.RDFXMLOntologyFormat;
import org.semanticweb.owlapi.model.AddAxiom;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLAxiom;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLClassAssertionAxiom;
import org.semanticweb.owlapi.model.OWLDataFactory;
import org.semanticweb.owlapi.model.OWLDataProperty;
import org.semanticweb.owlapi.model.OWLIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLObjectProperty;
import org.semanticweb.owlapi.model.OWLObjectPropertyAssertionAxiom;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyManager;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;
import org.semanticweb.owlapi.model.PrefixManager;
import org.semanticweb.owlapi.util.DefaultPrefixManager;
/**
 *
 * @author Bisma
 */
public class insertcharacter extends javax.swing.JFrame {

    /**
     * Creates new form insertcharacter
     */
    String gender;
    public insertcharacter() {
        initComponents();
        shower();
    }
void shower()
    {
         OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM_MICRO_RULE_INF);
FileManager.get().readModel( model, "jkp.owl" );
String queryString ="prefix uni: <http://www.semanticweb.org/bisma/ontologies/2016/2/noveljkp.owl#> \n" +
"select * {?Novel uni:isa uni:Novel}";
Query query = QueryFactory.create(queryString);
QueryExecution qe= QueryExecutionFactory.create(query, model);
org.apache.jena.query.ResultSet resultset = qe.execSelect();
java.io.ByteArrayOutputStream baos= new java.io.ByteArrayOutputStream();
            ResultSetFormatter.outputAsCSV(baos, resultset);
            String answer= baos.toString();
           answer= java.util.Arrays.toString(answer.split("http://www.semanticweb.org/bisma/ontologies/2016/2/noveljkp.owl#"));
       String[]  array = answer.split(",");
       String lastOne = array[array.length-1];
       lastOne=lastOne.substring(0,lastOne.length()-1);
       for(int i=1;i<array.length-1;i++)
       {
       
           jComboBox1.addItem(array[i]);
       }
            jComboBox1.addItem(lastOne);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(742, 478));
        setMinimumSize(new java.awt.Dimension(742, 478));
        setPreferredSize(new java.awt.Dimension(742, 478));
        getContentPane().setLayout(null);

        jLabel3.setFont(new java.awt.Font("Khmer UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("NOVEL MANIA");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 0, 750, 70);

        jLabel2.setFont(new java.awt.Font("Khmer UI", 1, 14)); // NOI18N
        jLabel2.setText("Character Belongs to:");
        jLabel2.setToolTipText("");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(70, 210, 150, 50);

        jLabel4.setFont(new java.awt.Font("Khmer UI", 1, 14)); // NOI18N
        jLabel4.setText("Enter Character Discription:");
        jLabel4.setToolTipText("");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(30, 260, 210, 50);

        jLabel5.setFont(new java.awt.Font("Khmer UI", 1, 14)); // NOI18N
        jLabel5.setText("Character is:");
        jLabel5.setToolTipText("");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(130, 170, 90, 50);

        jLabel6.setFont(new java.awt.Font("Khmer UI", 1, 14)); // NOI18N
        jLabel6.setText("Enter Character Name:");
        jLabel6.setToolTipText("");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(60, 130, 170, 50);
        getContentPane().add(jTextField1);
        jTextField1.setBounds(230, 130, 350, 40);

        jCheckBox1.setText("Male");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox1);
        jCheckBox1.setBounds(240, 180, 81, 23);

        jCheckBox2.setText("Female");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox2);
        jCheckBox2.setBounds(340, 180, 140, 23);

        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(230, 220, 350, 40);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(230, 280, 350, 110);

        jButton1.setFont(new java.awt.Font("Khmer UI", 1, 14)); // NOI18N
        jButton1.setText("INSERT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(130, 410, 230, 50);

        jButton3.setFont(new java.awt.Font("Khmer UI", 1, 14)); // NOI18N
        jButton3.setText("BACK");
        jButton3.setToolTipText("");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(400, 410, 210, 50);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/forms/7.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 750, 500);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       Insertion s=new Insertion();
        s.setVisible(true);
      insertcharacter.this.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         String discription= jTextArea1.getText();
       String nameofchar= jTextField1.getText();
       String author= (String) jComboBox1.getSelectedItem();
      if(discription.equals("") || "".equals(nameofchar) || "".equals(author) || "".equals(gender) )
       {
           JOptionPane.showMessageDialog(null, "Enter all fields");
       }
         else {
        
           try {
               nameofchar= nameofchar.replaceAll("\\s+","_");
               author= author.replaceAll("\\s+","");
               gender= gender.replaceAll("\\s+","");
               System.out.println(gender);
               IRI ontologyIRI = IRI.create("http://www.semanticweb.org/bisma/ontologies/2016/2/noveljkp.owl");
               OWLOntologyManager man = OWLManager.createOWLOntologyManager();
               OWLOntology ontology = man.loadOntologyFromOntologyDocument(new File("jkp.owl"));
               OWLDataFactory factory = man.getOWLDataFactory();
               PrefixManager pm = new DefaultPrefixManager(ontologyIRI+"#");
OWLClass person = factory.getOWLClass(":Novel", pm);
OWLClass woman = factory.getOWLClass(IRI.create(ontologyIRI + "#Character"));
           man.addAxiom(ontology, factory.getOWLSubClassOfAxiom(woman, person));
           OWLClass Male = factory.getOWLClass(IRI.create(ontologyIRI + "#Male"));
            OWLClass Female = factory.getOWLClass(IRI.create(ontologyIRI + "#Female"));
        man.addAxiom(ontology, factory.getOWLSubClassOfAxiom(Male, woman));
         man.addAxiom(ontology, factory.getOWLSubClassOfAxiom(Female, woman));
          
           
               OWLNamedIndividual authorname = factory.getOWLNamedIndividual(":"+nameofchar, pm);
//insert with adding type:
               
               OWLClassAssertionAxiom classAssertion;
               if("MALE".equals(gender)){
               classAssertion = factory.getOWLClassAssertionAxiom(Male, authorname);
               }
               else {
               classAssertion = factory.getOWLClassAssertionAxiom(Female, authorname);
               }
               
               man.addAxiom(ontology, classAssertion);
              OWLObjectProperty isa = factory.getOWLObjectProperty(IRI
                       .create(ontologyIRI + "#isa"));
              OWLObjectProperty writtenby = factory.getOWLObjectProperty(IRI
                       .create(ontologyIRI + "#belongsto"));
               OWLIndividual novel = factory.getOWLNamedIndividual(IRI
            .create(ontologyIRI + "#"+gender));
               OWLIndividual athname = factory.getOWLNamedIndividual(IRI
            .create(ontologyIRI + "#"+author));
               OWLObjectPropertyAssertionAxiom axiom1 = factory
                       .getOWLObjectPropertyAssertionAxiom(isa, authorname, novel);
               AddAxiom addAxiom1 = new AddAxiom(ontology, axiom1);
               man.applyChange(addAxiom1);
                 OWLObjectPropertyAssertionAxiom axiom2 = factory
                       .getOWLObjectPropertyAssertionAxiom(writtenby, authorname, athname);
               AddAxiom addAxiom2 = new AddAxiom(ontology, axiom2);
               man.applyChange(addAxiom2);
               OWLDataProperty char_detail = factory.getOWLDataProperty(IRI.create(ontologyIRI + "#character_discription"));
                OWLDataProperty char_name = factory.getOWLDataProperty(IRI.create(ontologyIRI + "#character_name"));
               // We create a data property assertion
               OWLAxiom axiom4 = factory.getOWLDataPropertyAssertionAxiom(char_detail,authorname , discription);
               man.applyChange(new AddAxiom(ontology, axiom4));
                OWLAxiom axiom5 = factory.getOWLDataPropertyAssertionAxiom(char_name,authorname ,nameofchar);
               man.applyChange(new AddAxiom(ontology, axiom5));
               man.saveOntology(ontology, new RDFXMLOntologyFormat());
               jTextArea1.setText("");
       jTextField1.setText("");
           } catch (OWLOntologyCreationException ex) {
               Logger.getLogger(insertauthor.class.getName()).log(Level.SEVERE, null, ex);
           } catch (OWLOntologyStorageException ex) {
               Logger.getLogger(insertauthor.class.getName()).log(Level.SEVERE, null, ex);
           }
   
       }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
       if (jCheckBox1.isSelected()) {
            jCheckBox2.setSelected(false);
            gender =jCheckBox1.getText();
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
       if (jCheckBox2.isSelected()) {
            jCheckBox1.setSelected(false);
            gender =jCheckBox2.getText(); 
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(insertcharacter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(insertcharacter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(insertcharacter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(insertcharacter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new insertcharacter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
